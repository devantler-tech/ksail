#!/bin/bash

function main_run_down_destroy_k3d_cluster() {
  echo "🔥 Destroying ${cluster_name} cluster"
  local cluster_name=${1}
  k3d cluster delete "$cluster_name" || {
    echo "🚨 Cluster deletion failed. Exiting..."
    exit 1
  }
}

function main_run_down_destroy_talos_cluster() {
  talosctl cluster destroy --name "${cluster_name}" --force
  talosctl config context default
  talosctl config remove "${cluster_name}" -y
  kubectl config unset current-context
  if kubectl config get-contexts -o name | grep admin@"${cluster_name}"; then
    kubectl config delete-context admin@"${cluster_name}"
  fi
  if kubectl config get-clusters | grep "${cluster_name}"; then
    kubectl config delete-cluster "${cluster_name}"
  fi
  if kubectl config get-users | grep admin@"${cluster_name}"; then
    kubectl config delete-user admin@"${cluster_name}"
  fi
}

function main_run_update() {
  local cluster_name=${1}
  local manifests_path=${2}
  local time
  time=$(date +%s)
  echo "🗳️ Push OCI artifact to Docker"
  flux push artifact oci://localhost:5050/"${cluster_name}":"$time" \
    --path="${manifests_path}" \
    --source="$(git config --get remote.origin.url)" \
    --revision="$(git branch --show-current)@sha1:$(git rev-parse HEAD)" || {
    echo "🚨 OCI artifact push failed. Exiting..."
    exit 1
  }
  flux tag artifact oci://localhost:5050/"${cluster_name}":"$time" \
    --tag latest || {
    echo "🚨 OCI artifact tag failed. Exiting..."
    exit 1
  }
}

function main_run_check_if_docker_is_running() {
  echo "🐳 Checking if Docker is running"
  if docker info &>/dev/null; then
    echo "🐳✅ Docker is running"
  else
    echo "🚨 Docker is not running. Exiting..."
    exit 1
  fi
}

function main_run_up_check_registry_exists() {
  local registry_name=${1}
  if (docker volume ls | grep -q "${registry_name}") && (docker container ls -a | grep -q "${registry_name}"); then
    true
  else
    false
  fi
}

function main_run_up_create_oci_registry() {
  local registry_name=$1
  local remote_url=$2
  local port=$3

  if main_run_up_check_registry_exists "$registry_name"; then
    echo "🧮✅ Registry '$registry_name' already exists. Skipping..."
  else
    echo "🧮 Creating registry '$registry_name'"
    docker run -d -p "$port":5000 \
      -e REGISTRY_PROXY_REMOTEURL="$remote_url" \
      --restart always \
      --name "$registry_name" \
      --volume "$registry_name":/var/lib/registry \
      registry:2 || {
      echo "🚨 Registry creation failed. Exiting..."
      exit 1
    }
  fi
}

function main_run_up_create_oci_registries() {
  echo "🧮 Adding pull-through registries"
  main_run_up_create_oci_registry "proxy-docker-hub.com" "https://hub.docker.com" 5002
  main_run_up_create_oci_registry "proxy-registry.k8s.io" "https://registry.k8s.io" 5003
  main_run_up_create_oci_registry "proxy-gcr.io" "https://gcr.io" 5004
  main_run_up_create_oci_registry "proxy-ghcr.io" "https://ghcr.io" 5005
  main_run_up_create_oci_registry "proxy-quay.io" "https://quay.io" 5006
  main_run_up_create_oci_registry "manifests" "" 5050
}

function main_run_up_add_sops_gpg_key() {
  echo "🔐 Adding SOPS GPG key"
  kubectl create namespace flux-system
  if [[ -z ${KSAIL_SOPS_GPG_KEY} ]]; then
    gpg --batch --passphrase '' --quick-gen-key ksail default default
    local fingerprint
    fingerprint=$(gpg --list-keys -uid ksail | grep '^      *' | tr -d ' ')
    export KSAIL_SOPS_GPG_KEY
    KSAIL_SOPS_GPG_KEY=$(gpg --export-secret-keys --armor "$fingerprint")
  else
    kubectl create secret generic sops-gpg \
      --namespace=flux-system \
      --from-literal=sops.asc="${KSAIL_SOPS_GPG_KEY}" ||
      {
        echo "🚨 SOPS GPG key creation failed. Exiting..."
        exit 1
      }
  fi
}

function main_run_up_install_flux() {
  local cluster_name=${1}
  local docker_gateway_ip=${2}
  local flux_path=${3}
  echo "🚀 Installing Flux"
  flux check --pre || {
    echo "🚨 Flux prerequisites check failed. Exiting..."
    exit 1
  }
  flux install || {
    echo "🚨 Flux installation failed. Exiting..."
    exit 1
  }
  local source_url="oci://$docker_gateway_ip:5050/${cluster_name}"
  flux create source oci flux-system \
    --url="$source_url" \
    --insecure=true \
    --tag=latest || {
    echo "🚨 Flux OCI source creation failed. Exiting..."
    exit 1
  }

  flux create source oci devantler-manifests \
    --url=oci://ghcr.io/devantler/oci-registry/manifests \
    --tag=latest || {
    echo "🚨 Flux OCI source creation failed. Exiting..."
    exit 1
  }

  flux create kustomization flux-system \
    --source=OCIRepository/flux-system \
    --path="${flux_path}" || {
    echo "🚨 Flux kustomization creation failed. Exiting..."
    exit 1
  }
}

function main_run_up_provision_k3d_cluster() {
  echo "⛴️ Provision ${cluster_name} cluster"
  if [[ -n "$k3d_config_path" ]]; then
    k3d cluster create --config "${k3d_config_path}" || {
      echo "🚨 Cluster creation failed. Exiting..."
      exit 1
    }
  else
    k3d cluster create "$cluster_name" || {
      echo "🚨 Cluster creation failed. Exiting..."
      exit 1
    }
  fi
}

function main_run_up_provision_talos_cluster() {
  local cluster_name=${1}
  local docker_gateway_ip=${2}
  echo "⛴️ Provision ${cluster_name} cluster"
  talosctl cluster create \
    --name "${cluster_name}" \
    --registry-mirror docker.io=http://"$docker_gateway_ip":5001 \
    --registry-mirror hub.docker.com=http://"$docker_gateway_ip":5002 \
    --registry-mirror registry.k8s.io=http://"$docker_gateway_ip":5003 \
    --registry-mirror gcr.io=http://"$docker_gateway_ip":5004 \
    --registry-mirror ghcr.io=http://"$docker_gateway_ip":5005 \
    --registry-mirror quay.io=http://"$docker_gateway_ip":5006 \
    --registry-mirror manifests=http://"$docker_gateway_ip":5050 \
    --wait || {
    echo "🚨 Cluster creation failed. Exiting..."
    exit 1
  }
  # talosctl config nodes 10.5.0.2 10.5.0.3 || {
  #   echo "🚨 Cluster configuration failed. Exiting..."
  #   exit 1
  # }

  # TODO: Add support for Talos patching
}

function main_run_up_provision_cluster() {
  local cluster_name=${1}
  local backend=${2}
  local docker_gateway_ip=${3}
  if [[ "$backend" == "k3d" ]]; then
    main_run_up_provision_k3d_cluster "$cluster_name"
  elif [[ "$backend" == "talos" ]]; then
    main_run_up_provision_talos_cluster "$cluster_name" "$docker_gateway_ip"
  fi
}

function main_run_up_handle_prompts_k3d() {
  echo -e "${BOLD}What is the path to your k3d cluster config file? Leave blank if you do not want to use a config file.${NORMAL}"
  while true; do
    echo -n "> "
    read -r k3d_config_path
    if realpath "$k3d_config_path" >/dev/null || [ -z "$k3d_config_path" ]; then
      break
    else
      echo
      echo "🚫 K3d config path is wrong. Please enter a valid path or leave blank."
    fi
  done
}

function main_run_up_handle_prompts_talos() {
  echo
}

function main_run_up_handle_prompts() {
  echo "⚙️ Configuring cluster"
  echo -e "${BOLD}What is the name of your cluster? (default: ${GREEN}ksail${WHITE})${NORMAL}"
  echo -n "> "
  read -r cluster_name
  if [ -z "$cluster_name" ]; then
    cluster_name="ksail"
  fi

  echo -e "${BOLD}What is the path to your manifests files? (default: ${GREEN}./k8s${WHITE})${NORMAL}"
  while true; do
    echo -n "> "
    read -r manifests_path
    if [ -z "$manifests_path" ]; then
      manifests_path="./k8s"
    fi
    if realpath "$manifests_path" >/dev/null; then
      break
    else
      echo
      echo "🚫 Manifests path does not exist. Please enter a valid path."
    fi
  done

  echo -e "${BOLD}What is the path to your flux kustomizations? (default: ${GREEN}./clusters/${cluster_name}/flux${WHITE})${NORMAL}"
  while true; do
    echo -n "> "
    read -r flux_path
    if [ -z "$flux_path" ]; then
      flux_path="./clusters/${cluster_name}/flux"
    fi
    if realpath "$manifests_path/$flux_path" >/dev/null; then
      break
    else
      echo
      echo "🚫 Flux path does not exist. Please enter a valid path."
    fi
  done

  if [[ "$backend" == "k3d" ]]; then
    main_run_up_handle_prompts_k3d
  elif [[ "$backend" == "talos" ]]; then
    main_run_up_handle_prompts_talos
  fi
}

function main_run_up_handle_flags() {
  local backend=${2}
  local OPTIND=3
  while getopts "n:m:f:c:h" flag; do
    case "${flag}" in
    n)
      cluster_name=${OPTARG}
      flux_path="./clusters/${cluster_name}/flux"
      ;;
    m)
      manifests_path=${OPTARG}
      ;;
    f)
      flux_path=${OPTARG}
      ;;
    c)
      if [[ "$backend" != "k3d" ]]; then
        echo "🚨 Bad parameters: $*"
        exit 1
      fi
      k3d_config_path=${OPTARG}
      k3d_config_cluster_name=$(yq eval '.metadata.name' "$k3d_config_path")
      if [ -n "$k3d_config_cluster_name" ]; then
        echo "✍🏻 Overriding cluster name with the name '$k3d_config_cluster_name' from '$k3d_config_path'"
        cluster_name=$k3d_config_cluster_name
      fi
      ;;
    *)
      if [ $# -eq 3 ] && [[ " ${valid_global_flags[*]} " =~ (^| )${3}( |$) ]]; then
        local OPTIND=3
        if getopts "h" flag; then
          if [[ "$backend" == "k3d" ]]; then
            main_run_global_flags "$flag" "up-k3d"
          elif [[ "$backend" == "talos" ]]; then
            main_run_global_flags "$flag" "up-talos"
          fi
        fi
      fi
      echo "🚨 Bad parameters: $*"
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))
  if [ $# -gt 0 ]; then
    echo "🚨 Bad parameters: $*"
    exit 1
  fi
}

function main_run_up_validate_configuration() {
  echo "🔍 Validating configuration"
  if [ -z "$cluster_name" ]; then
    echo "🚨 Cluster name is empty. Exiting..."
    exit 1
  fi
  if ! realpath "$manifests_path" >/dev/null; then
    echo "🚨 Manifests path does not exist. Exiting..."
    exit 1
  fi
  if ! realpath "$manifests_path/$flux_path" >/dev/null; then
    echo "🚨 Flux path does not exist. Exiting..."
    exit 1
  fi
  if [[ "$backend" == "k3d" && -n "$k3d_config_path" ]]; then
    if ! realpath "$k3d_config_path" >/dev/null; then
      echo "🚨 K3d config path does not exist. Exiting..."
      exit 1
    fi
  fi
  echo "🔍✅ Configuration is valid"
}

function main_run_up() {
  local cluster_name
  local backend
  local manifests_path="./k8s"
  local flux_path
  local k3d_config_path
  local docker_gateway_ip
  docker_gateway_ip=$(docker network inspect bridge --format='{{(index .IPAM.Config 0).Gateway}}')
  if [[ "$OSTYPE" == "darwin"* ]]; then
    docker_gateway_ip="192.168.65.254"
  fi
  if [ $# -eq 1 ]; then
    main_run_help up
  else
    local command=${2}
    case $command in
    k3d)
      backend=$command
      ;;
    talos)
      backend=$command
      ;;
    *)
      if [ $# -eq 2 ]; then
        local OPTIND=2
        if getopts "h" flag; then
          main_run_global_flags "$flag" up
        fi
      fi
      echo "🚨 Bad parameters: $*"
      exit 1
      ;;
    esac
  fi
  if [ $# -eq 2 ]; then
    main_run_up_handle_prompts
  else
    main_run_up_handle_flags "$@"
  fi
  main_run_up_validate_configuration && echo
  main_run_check_if_docker_is_running && echo
  main_run_up_create_oci_registries && echo
  main_run_update "$cluster_name" "$manifests_path" && echo
  main_run_down_destroy_cluster "$cluster_name" "$backend" && echo
  main_run_up_provision_cluster "$cluster_name" "$backend" "$docker_gateway_ip" && echo
  main_run_up_install_flux "$cluster_name" "$docker_gateway_ip" "$flux_path"
}

function main_run_down_handle_prompts() {
  echo -e "${BOLD}Which cluster would you like to destroy?"
  while true; do
    read -r cluster_name
    if [[ -z "$cluster_name" ]]; then
      echo "🚫 You must enter a cluster name."
      echo
    else
      break
    fi
  done
  echo
}

function main_run_down_handle_flags() {
  local OPTIND=3
  while getopts "hn:" flag; do
    case "${flag}" in
    n)
      cluster_name=${OPTARG}
      ;;
    *)
      main_run_global_flags "$flag" down
      ;;
    esac
  done
}

function main_run_down_destroy_cluster() {
  local cluster_name=${1}
  local backend=${2}
  if [[ "$backend" == "k3d" ]]; then
    main_run_down_destroy_k3d_cluster "$cluster_name"
  elif [[ "$backend" == "talos" ]]; then
    main_run_down_destroy_talos_cluster "$cluster_name"
  fi
}

function main_run_down() {
  local cluster_name="ksail"
  local backend
  if [ $# -eq 1 ]; then
    main_run_help down
  else
    local command=${2}
    case $command in
    k3d)
      backend=$command
      ;;
    talos)
      backend=$command
      ;;
    *)
      if [ $# -eq 2 ]; then
        local OPTIND=2
        if getopts "h" flag; then
          main_run_global_flags "$flag" down
        fi
      fi
      echo "🚨 Bad parameters: $*"
      exit 1
      ;;
    esac
  fi
  if [ $# -eq 2 ]; then
    main_run_down_handle_prompts
  else
    main_run_down_handle_flags "$@"
  fi
  main_run_check_if_docker_is_running
  main_run_down_destroy_cluster "$cluster_name" "$backend"

}
