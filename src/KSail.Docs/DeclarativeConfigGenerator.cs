using System.Text.RegularExpressions;
using Devantler.KubernetesGenerator.Core;
using Devantler.KubernetesGenerator.Core.Converters;
using Devantler.KubernetesGenerator.Core.Inspectors;
using KSail.Models;
using KSail.Models.Project.Enums;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.NamingConventions;
using YamlDotNet.System.Text.Json;

namespace KSail.Docs;


static class DeclarativeConfigGenerator
{
  public static string Generate()
  {
    var cluster = new KSailCluster();

    var serializer = new SerializerBuilder()
      .DisableAliases()
      .WithTypeInspector(inner => new KubernetesTypeInspector(new CommentGatheringTypeInspector(new SystemTextJsonTypeInspector(inner))))
      .WithTypeConverter(new IntstrIntOrStringTypeConverter())
      .WithTypeConverter(new ResourceQuantityTypeConverter())
      .WithEmissionPhaseObjectGraphVisitor(inner => new CommentsObjectGraphVisitor(inner.InnerVisitor))
      .WithNamingConvention(CamelCaseNamingConvention.Instance).Build();
    string docsPath = Path.Combine();

    string declarativeConfigMarkdown = $"""
    ```yaml
    ###################################################################
    ## autogenerated by src/KSail.Docs/DeclarativeConfigGenerator.cs ##
    ###################################################################
    {serializer.Serialize(cluster).TrimEnd().Replace(Environment.UserName, "<user>", StringComparison.Ordinal)}
    ```
    """;

    return declarativeConfigMarkdown;
  }
}
