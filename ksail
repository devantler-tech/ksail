#!/bin/bash

valid_global_flags=(
  "-h"
  "-v"
)

valid_backends=(
  "k3d"
  "talos"
)

function main_check_os() {
  if [[ "$OSTYPE" != "darwin"* && "$OSTYPE" != "linux-gnu"* ]]; then
    echo "üö´ Unsupported OS. KSail only supports Unix and Linux based operating systems. Exiting..."
    exit 1
  fi
}

function main_define_colors() {
  RED='\033[1;31m'
  GREEN='\033[1;32m'
  YELLOW='\033[1;33m'
  BLUE='\033[1;34m'
  PURPLE='\033[1;35m'
  WHITE='\033[0m'
}

function main_define_font_types() {
  NORMAL=$(tput sgr0)
  BOLD=$(tput bold)
  ITALIC=$(tput sitm)
  UNDERLINE=$(tput smul)
}

function main_run_global_flags() {
  local flag=$1
  local arg=$2
  case "${flag}" in
  h)
    main_run_help "$arg"
    exit
    ;;
  v)
    main_run_version
    exit
    ;;
  \?)
    echo "üö® Unknown flag: $1"
    exit 1
    ;;
  esac
}

function main_run_help_no_arg() {
  echo "Usage:"
  echo -e "  ksail ${PURPLE}<command>${WHITE} [flags]"
  echo
  echo "Commands:"
  echo "  install    install dependencies"
  echo "  up         create cluster"
  echo "  down       destroy cluster"
  echo
  echo "Global Flags:"
  echo "  -h    print help information"
  echo "  -v    print version information"
}

function main_run_help_install_arg() {
  echo "Usage:"
  echo "  ksail install <backend>"
  echo
  echo "Backends:"
  echo "  k3d    k3s-in-docker"
  echo "  talos  talos-in-docker"
}

function main_run_help_up_arg() {
  echo "Usage:"
  echo -e "  ksail up ${PURPLE}<backend>${WHITE} [flags]"
  echo
  echo "Backends:"
  echo "  k3d    k3s-in-docker"
  echo "  talos  talos-in-docker"
  echo
  echo "Flags:"
  echo -e "  -n   name of the cluster (${GREEN}ksail${WHITE})"
  echo -e "  -m   path to the manifests files root directory (${GREEN}./k8s${WHITE})"
  echo -e "  -f   path to the flux kustomization manifests (${GREEN}./k8s/clusters/${PURPLE}<cluster-name>${GREEN}/flux${WHITE})"
  echo
  echo "‚ÑπÔ∏è Notes:"
  echo -e "  - Backends may have additional flags. Run '${BLUE}ksail up ${PURPLE}<backend>${BLUE} -h${WHITE}' for more information."
}

function main_run_help_up_k3d_arg() {
  echo "Usage:"
  echo " ksail up k3d [flags]"
  echo
  echo "Flags:"
  echo -e "  -n   name of the cluster (${GREEN}ksail${WHITE})"
  echo -e "  -m   path to the manifests files root directory (${GREEN}./k8s${WHITE})"
  echo -e "  -f   path to the flux kustomization manifests (${GREEN}./k8s/clusters/${PURPLE}<cluster-name>${GREEN}/flux${WHITE})"
  echo -e "  -c   path to the k3d cluster config file (${GREEN}./${PURPLE}<cluster-name>${GREEN}-k3d-config.yaml${WHITE})"
}

function main_run_help_up_talos_arg() {
  echo "Usage:"
  echo " ksail up talos [flags]"
  echo
  echo "Flags:"
  echo -e "  -n   name of the cluster (${GREEN}ksail${WHITE})"
  echo -e "  -m   path to the manifests files root directory (${GREEN}./k8s${WHITE})"
  echo -e "  -f   path to the flux kustomization manifests (${GREEN}./k8s/clusters/${PURPLE}<cluster-name>${GREEN}/flux${WHITE})"
}

function main_run_help_down_arg() {
  echo "Usage:"
  echo -e "  ksail down ${PURPLE}<backend>${WHITE} [flags]"
  echo
  echo "Backends:"
  echo "  k3d    k3s-in-docker"
  echo "  talos  talos-in-docker"
  echo
  echo "Flags:"
  echo -e "  -n, --name      name of the cluster (${GREEN}ksail${WHITE})"
}

function main_run_help() {
  if [ -z "${1}" ]; then
    main_run_help_no_arg
  else
    while [ $# -gt 0 ]; do
      case "$1" in
      install)
        main_run_help_install_arg "$@"
        exit
        ;;
      up)
        main_run_help_up_arg "$@"
        exit
        ;;
      up-k3d)
        main_run_help_up_k3d_arg "$@"
        exit
        ;;
      up-talos)
        main_run_help_up_talos_arg "$@"
        exit
        ;;
      down)
        main_run_help_down_arg "$@"
        exit
        ;;
      *)
        echo "Unknown argument: $1"
        exit 1
        ;;
      esac
    done
  fi
}

function main_run_version() {
  echo "KSail $VERSION"
}

function main_run_down_destroy_k3d_cluster() {
  local cluster_name=${1}
  k3d cluster delete "$cluster_name" || {
    echo "üö® Cluster deletion failed. Exiting..."
    exit 1
  }
}

function main_run_down_destroy_talos_cluster() {
  talosctl cluster destroy --name "${cluster_name}" --force
  talosctl config context default
  talosctl config remove "${cluster_name}" -y
  kubectl config unset current-context
  if kubectl config get-contexts -o name | grep admin@"${cluster_name}"; then
    kubectl config delete-context admin@"${cluster_name}"
  fi
  if kubectl config get-clusters | grep "${cluster_name}"; then
    kubectl config delete-cluster "${cluster_name}"
  fi
  if kubectl config get-users | grep admin@"${cluster_name}"; then
    kubectl config delete-user admin@"${cluster_name}"
  fi
}

function main_run_update() {
  local cluster_name=${1}
  local manifests_path=${2}
  local time
  time=$(date +%s)
  echo "üó≥Ô∏è Push OCI artifact to Docker"
  flux push artifact oci://localhost:5050/"${cluster_name}":"$time" \
    --path="${manifests_path}" \
    --source="$(git config --get remote.origin.url)" \
    --revision="$(git branch --show-current)@sha1:$(git rev-parse HEAD)"
  flux tag artifact oci://localhost:5050/"${cluster_name}":"$time" \
    --tag latest
}

function main_run_introduction() {
  echo -e "‚õ¥Ô∏è üê≥   ${BOLD}${UNDERLINE}Welcome to ${BLUE}KSail${WHITE}   ‚õ¥Ô∏è üê≥${NORMAL}"
  echo -e "                                     ${BLUE}. . .${WHITE}"
  echo -e "                __/___                 ${BLUE}:${WHITE}"
  echo -e "          _____/______|             ___${BLUE}|${WHITE}____     |\"\\/\"|"
  echo "  _______/_____\_______\_____     ,'        \`.    \  /"
  echo -e "  \               ${ITALIC}KSail${NORMAL}      |    |  ^        \___/  |"
  echo -e "${BLUE}~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~${WHITE}"
  echo
  echo -e "${BLUE}KSail${WHITE} can help you provision ${GREEN}GitOps enabled K8s environments${WHITE} in ${BLUE}Docker${WHITE}."
  echo
}

function main_run_no_arg() {

  main_run_introduction
  main_run_help
}

function main_run_instal_homebrew() {
  if command -v brew &>/dev/null; then
    echo "üì¶‚úÖ Homebrew already installed. Updating..."
    brew upgrade
  else
    echo "üì¶üî® Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    (
      echo
      echo "eval '$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)'"
    ) >>/home/main_runner/.bashrc
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    echo "üì¶‚úÖ Homebrew installed"
  fi
}

function main_run_install_dependency() {
  local dependency=${1}
  local command=${2}
  if [ -z "$command" ]; then
    command="$dependency"
  fi
  echo "üì¶ Installing $dependency"
  if command -v "$command" &>/dev/null; then
    echo "üì¶‚úÖ $dependency already installed. Skipping..."
  else
    echo "üì¶üî® Installing $dependency"
    brew install "$dependency"
    echo "üì¶‚úÖ $dependency installed"
  fi
}

function main_run_install_dependencies() {
  local backend=${1}
  echo "üì¶ Installing dependencies"
  main_run_instal_homebrew
  main_run_install_dependency "yq"
  main_run_install_dependency "kubeconform"
  main_run_install_dependency "kustomize"
  main_run_install_dependency "docker"
  main_run_install_dependency "fluxcd/tap/flux" "flux"
  main_run_install_dependency "gpg"
  main_run_install_dependency "kubectl"
  if [[ "$backend" == "k3d" ]]; then
    main_run_install_dependency "k3d"
  elif [[ "$backend" == "talos" ]]; then
    main_run_install_dependency "talos-systems/talos/talosctl"
  fi
}

function main_run_install() {
  if [ -z "$2" ]; then
    main_run_help install
  elif [[ ! " ${valid_backends[*]} " =~ (^| )${2}( |$) ]] && [[ ! " ${valid_global_flags[*]} " =~ (^| )${2}( |$) ]] || [[ ! " ${valid_global_flags[*]} " =~ (^| )${3}( |$) ]] || [ $# -gt 3 ]; then
    echo "üö® Bad parameters: $*"
    exit 1
  elif [[ " ${valid_global_flags[*]} " =~ (^| )${2}( |$) && $# -eq 2 ]] || [[ " ${valid_global_flags[*]} " =~ (^| )${3}( |$) && $# -eq 3 ]]; then
    local OPTIND=$#
    while getopts "hv" flag; do
      main_run_global_flags "$flag" install
    done
  else
    local backend=${2}
    main_run_install_dependencies "$backend"
  fi

}

function main_run_check_if_docker_is_running() {
  echo "ÔøΩ Checking if Docker is running"
  if docker info &>/dev/null; then
    echo "ÔøΩ‚úÖ Docker is running"
  else
    echo "ÔøΩÔøΩ Docker is not running. Exiting..."
    exit 1
  fi
}

function check_registry_exists() {
  local registry_name=${1}
  if (docker volume ls | grep -q "${registry_name}") && (docker container ls -a | grep -q "${registry_name}"); then
    true
  else
    false
  fi
}

function main_run_up_create_oci_registry() {
  local registry_name=$1
  local remote_url=$2
  local port=$3

  if check_registry_exists "$registry_name"; then
    echo "üßÆ‚úÖ Registry '$registry_name' already exists. Skipping..."
  else
    echo "üßÆ Creating registry '$registry_name'"
    docker run -d -p "$port":5000 \
      -e REGISTRY_PROXY_REMOTEURL="$remote_url" \
      --restart always \
      --name "$registry_name" \
      --volume "$registry_name":/var/lib/registry \
      registry:2 || {
      echo "ÔøΩ Registry creation failed. Exiting..."
      exit 1
    }
  fi
}

function main_run_up_create_oci_registries() {
  echo "üßÆ Adding pull-through registries"
  main_run_up_create_oci_registry "proxy-docker-hub.com" "https://hub.docker.com" 5002
  main_run_up_create_oci_registry "proxy-registry.k8s.io" "https://registry.k8s.io" 5003
  main_run_up_create_oci_registry "proxy-gcr.io" "https://gcr.io" 5004
  main_run_up_create_oci_registry "proxy-ghcr.io" "https://ghcr.io" 5005
  main_run_up_create_oci_registry "proxy-quay.io" "https://quay.io" 5006
  main_run_up_create_oci_registry "manifests" "" 5050
}

function main_run_up_add_sops_gpg_key() {
  echo "ÔøΩ Adding SOPS GPG key"
  kubectl create namespace flux-system
  if [[ -z ${KSAIL_SOPS_GPG_KEY} ]]; then
    gpg --batch --passphrase '' --quick-gen-key ksail default default
    local fingerprint
    fingerprint=$(gpg --list-keys -uid ksail | grep '^      *' | tr -d ' ')
    export KSAIL_SOPS_GPG_KEY
    KSAIL_SOPS_GPG_KEY=$(gpg --export-secret-keys --armor "$fingerprint")
  else
    kubectl create secret generic sops-gpg \
      --namespace=flux-system \
      --from-literal=sops.asc="${KSAIL_SOPS_GPG_KEY}" ||
      {
        echo "üö® SOPS GPG key creation failed. Exiting..."
        exit 1
      }
  fi
}

function main_run_up_install_flux() {
  local cluster_name=${1}
  local docker_gateway_ip=${2}
  local flux_path=${3}
  echo "üöÄ Installing Flux"
  flux check --pre || {
    echo "üö® Flux prerequisites check failed. Exiting..."
    exit 1
  }
  flux install || {
    echo "üö® Flux installation failed. Exiting..."
    exit 1
  }
  local source_url="oci://$docker_gateway_ip:5050/${cluster_name}"
  flux create source oci flux-system \
    --url="$source_url" \
    --insecure=true \
    --tag=latest || {
    echo "üö® Flux OCI source creation failed. Exiting..."
    exit 1
  }

  flux create source oci devantler-manifests \
    --url=oci://ghcr.io/devantler/oci-registry/manifests \
    --tag=latest || {
    echo "üö® Flux OCI source creation failed. Exiting..."
    exit 1
  }

  flux create kustomization flux-system \
    --source=OCIRepository/flux-system \
    --path="${flux_path}" || {
    echo "üö® Flux kustomization creation failed. Exiting..."
    exit 1
  }
}

function main_run_up_provision_k3d_cluster() {
  if $k3d_config_path; then
    echo "‚õ¥Ô∏è Provision ${cluster_name} cluster"
    k3d cluster create --config "${k3d_config_path}" || {
      echo "üö® Cluster creation failed. Exiting..."
      exit 1
    }
  else
    k3d cluster create "$cluster_name" || {
      echo "üö® Cluster creation failed. Exiting..."
      exit 1
    }
  fi
}

function main_run_up_provision_talos_cluster() {
  local cluster_name=${1}
  local docker_gateway_ip
  docker_gateway_ip=$(docker network inspect bridge --format='{{(index .IPAM.Config 0).Gateway}}')
  if [[ "$OSTYPE" == "darwin"* ]]; then
    docker_gateway_ip="192.168.65.254"
  fi
  echo "‚õ¥Ô∏è Provision ${cluster_name} cluster"
  talosctl cluster create \
    --name "${cluster_name}" \
    --registry-mirror docker.io=http://"$docker_gateway_ip":5001 \
    --registry-mirror hub.docker.com=http://"$docker_gateway_ip":5002 \
    --registry-mirror registry.k8s.io=http://"$docker_gateway_ip":5003 \
    --registry-mirror gcr.io=http://"$docker_gateway_ip":5004 \
    --registry-mirror ghcr.io=http://"$docker_gateway_ip":5005 \
    --registry-mirror quay.io=http://"$docker_gateway_ip":5006 \
    --registry-mirror manifests=http://"$docker_gateway_ip":5050 \
    --wait || {
    echo "üö® Cluster creation failed. Exiting..."
    exit 1
  }
  # talosctl config nodes 10.5.0.2 10.5.0.3 || {
  #   echo "üö® Cluster configuration failed. Exiting..."
  #   exit 1
  # }

  # TODO: Add support for Talos patching
}

function main_run_up_configure_cluster_with_prompts() {
  echo -e "${BOLD}What would you like to name your cluster? (default: ${GREEN}ksail${WHITE})${NORMAL}"
  read -r cluster_name
  if [ -z "$cluster_name" ]; then
    cluster_name="ksail"
  fi

  echo -e "${BOLD}What is the path to your manifests files root directory? (default: ${GREEN}./k8s${WHITE})${NORMAL}"
  read -r manifests_path
  if [ -z "$manifests_path" ]; then
    manifests_path="./k8s"
  fi

  echo -e "${BOLD}What is the path to your flux kustomization manifests? (default: ${GREEN}./k8s/clusters/${cluster_name}/flux${WHITE})${NORMAL}"
  read -r flux_path
  if [ -z "$flux_path" ]; then
    flux_path="./"
  fi
}

function main_run_up_configure_cluster_with_flags() {
  local OPTIND=2
  while getopts "n:m:f:" flag; do
    case "${flag}" in
    n)
      cluster_name=${OPTARG}
      ;;
    m)
      manifests_path=${OPTARG}
      ;;
    f)
      flux_path=${OPTARG}
      ;;
    *)
      echo "üö´ Unknown flag: $2"
      exit 1
      ;;
    esac
  done
}

function main_run_up_configure() {
  if [ $# -eq 2 ]; then
    main_run_up_configure_cluster_with_prompts
  else
    main_run_up_configure_cluster_with_flags "$@"
  fi
}

function main_run_up_configure_k3d_cluster_with_prompts() {
  echo -e "${BOLD}What is the path to your k3d cluster config file? (default: ${GREEN}./${cluster_name}-k3d-config.yaml${WHITE})${NORMAL}"
  read -r k3d_config_path
  if [ -z "$k3d_config_path" ]; then
    k3d_config_path="./${cluster_name}-k3d-config.yaml"
  fi
}

function main_run_up_configure_k3d_cluster_with_flags() {
  local OPTIND=3
  while getopts "chv" flag; do
    case "${flag}" in
    c)
      k3d_config_path=${OPTARG}
      ;;
    *)
      main_run_global_flags "$flag" up-k3d
      ;;
    esac
  done
}

function main_run_up_configure_k3d_cluster() {
  if [ $# -eq 2 ]; then
    main_run_up_configure_k3d_cluster_with_prompts
  else
    main_run_up_configure_k3d_cluster_with_flags "$@"
  fi
}

function main_run_up_configure_talos_cluster_with_prompts() {
  echo
}

function main_run_up_configure_talos_cluster_with_flags() {
  local OPTIND=3
  while getopts "hv" flag; do
    case "${flag}" in
    *)
      main_run_global_flags "$flag" up-talos
      ;;
    esac
  done
}

function main_run_up_configure_talos_cluster() {
  if [ $# -eq 2 ]; then
    main_run_up_configure_talos_cluster_with_prompts
  else
    main_run_up_configure_talos_cluster_with_flags "$@"
  fi
}

function main_run_up() {
  local cluster_name="ksail"
  local manifests_path="./k8s"
  local flux_path="./k8s/clusters/${cluster_name}/flux"
  if [ -z "$2" ]; then
    main_run_help up
  elif [[ ! " ${valid_backends[*]} " =~ (^| )${2}( |$) ]] && [[ ! " ${valid_global_flags[*]} " =~ (^| )${2}( |$) ]]; then
    echo "üö® Invalid argument or flag: $2"
    exit 1
  elif [[ " ${valid_global_flags[*]} " =~ (^| )${2}( |$) ]]; then
    local OPTIND=2
    while getopts "hv" flag; do
      main_run_global_flags "$flag" up
    done
  else
    local backend=${2}
    main_run_up_configure "$@"
    if [[ "$backend" == "k3d" ]]; then
      main_run_up_configure_k3d_cluster "$@"
    elif [[ "$backend" == "talos" ]]; then
      main_run_up_configure_talos_cluster "$@"
    fi
    main_run_check_if_docker_is_running && echo
    main_run_up_create_oci_registries && echo
    main_run_update "$cluster_name" "$manifests_path" && echo
    if [[ "$backend" == "k3d" ]]; then
      main_run_down_destroy_k3d_cluster "$cluster_name"
      main_run_up_provision_k3d_cluster "$cluster_name"
    elif [[ "$backend" == "talos" ]]; then
      main_run_down_destroy_talos_cluster "$cluster_name"
      main_run_up_provision_talos_cluster "$cluster_name"
    fi
  fi
}

function configure_down_with_prompts() {
  echo -e "${BOLD}Which cluster would you like to destroy?"
  while true; do
    read -r cluster_name
    if [[ -z "$cluster_name" ]]; then
      echo "üö´ You must enter a cluster name."
      echo
    else
      break
    fi
  done
  echo
}

function configure_down_with_flags() {
  local OPTIND=2
  while getopts ":hn:b:p:" flag; do
    case "${flag}" in
    h)
      main_run_help down
      exit
      ;;
    n)
      cluster_name=${OPTARG}
      ;;
    *)
      echo "üö´ Unknown flag: $2"
      exit 1
      ;;
    esac
  done
  if [[ "$2" != "-"* ]]; then
    echo "üö´ Unknown flag: $2"
    exit 1
  fi
}

function main_run_down() {
  local cluster_name="ksail"
  if [ -z "$2" ]; then
    configure_down_with_prompts
  else
    configure_down_with_flags "$@"
  fi

  main_run_check_if_docker_is_running
  destroy_cluster "$cluster_name"
}

function main_run() {
  if [ $# -eq 0 ]; then
    main_run_no_arg
  else
    if [ $# -gt 0 ]; then
      case "$1" in
      install)
        main_run_install "$@"
        exit
        ;;
      up)
        main_run_up "$@"
        exit
        ;;
      down)
        main_run_down "$@"
        exit
        ;;
      *)
        if [[ " ${valid_global_flags[*]} " =~ (^| )${1}( |$) && $# -eq 1 ]]; then
          local OPTIND=1
          while getopts "hv" flag; do
            main_run_global_flags "$flag" ""
          done
        else
          echo "üö® Bad parameters: $*"
          exit 1
        fi
        ;;
      esac
    fi
  fi
}

function main() {
  main_check_os
  main_define_colors
  main_define_font_types

  main_run "$@"
}

VERSION="dev"
main "$@"
