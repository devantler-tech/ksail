#!/bin/bash
# The version of KSail.
# This value is overridden by the pipeline that creates new releases.
# It should not be changed from 'dev'.
VERSION="dev"

# Global Flags: Flags that can be used with any command
valid_global_flags=(
  "-h"
)

# Valid Backends: The different supported kubernetes-in-docker distributions
valid_backends=(
  "k3d"
  "talos"
)

function main_run_help_no_arg() {
  echo "Usage:"
  echo -e "  ksail ${PURPLE}<command>${WHITE} ${PURPLE}<flag>${WHITE}"
  echo
  echo "Commands:"
  echo "  install     install dependencies"
  echo "  up          create cluster (‚ö†Ô∏è unstable)"
  echo "  down        destroy cluster (‚ö†Ô∏è unstable)"
  echo "  update      update cluster (‚ö†Ô∏è unstable)"
  echo "  validate    validate manifest files (‚ö†Ô∏è unstable)"
  echo "  verify      verify cluster reconciliation (‚ö†Ô∏è unstable)"
  echo
  echo Flags:
  echo "  -v          print version information"
  echo
  echo "Global Flags:"
  echo "  -h          print help information"
}

function main_run_help_install_arg() {
  echo "Usage:"
  echo "  ksail install <backend>"
  echo
  echo "Backends:"
  echo "  k3d         k3s-in-docker"
  echo "  talos       talos-in-docker"
}

function main_run_help_up_arg() {
  echo "Usage:"
  echo -e "  ksail up ${PURPLE}<backend>${WHITE} ${PURPLE}[flags]${WHITE}"
  echo
  echo "Backends:"
  echo "  k3d    k3s-in-docker"
  echo "  talos  talos-in-docker"
  echo
  echo "Flags:"
  echo -e "  -n   name of the cluster (${GREEN}ksail${WHITE})"
  echo -e "  -m   path to the manifests files root directory (${GREEN}./k8s${WHITE})"
  echo -e "  -f   path to the flux kustomization manifests (${GREEN}./k8s/clusters/${PURPLE}<cluster-name>${GREEN}/flux${WHITE})"
  echo
  echo "‚ÑπÔ∏è Notes:"
  echo -e "  - Backends may have additional flags. Run '${BLUE}ksail up ${PURPLE}<backend>${BLUE} -h${WHITE}' for more information."
}

function main_run_help_up_k3d_arg() {
  echo "Usage:"
  echo -e " ksail up k3d ${PURPLE}[flags]${WHITE}"
  echo
  echo "Flags:"
  echo -e "  -n   name of the cluster (${GREEN}ksail${WHITE})"
  echo -e "  -m   path to the manifests files root directory (${GREEN}./k8s${WHITE})"
  echo -e "  -f   path to the flux kustomization manifests (${GREEN}./k8s/clusters/${PURPLE}<cluster-name>${GREEN}/flux${WHITE})"
  echo -e "  -c   path to the k3d cluster config file (${GREEN}./${PURPLE}<cluster-name>${GREEN}-k3d-config.yaml${WHITE})"
}

function main_run_help_up_talos_arg() {
  echo "Usage:"
  echo -e " ksail up talos ${PURPLE}[flags]${WHITE}"
  echo
  echo "Flags:"
  echo -e "  -n   name of the cluster (${GREEN}ksail${WHITE})"
  echo -e "  -m   path to the manifests files root directory (${GREEN}./k8s${WHITE})"
  echo -e "  -f   path to the flux kustomization manifests (${GREEN}./k8s/clusters/${PURPLE}<cluster-name>${GREEN}/flux${WHITE})"
}

function main_run_help_down_arg() {
  echo "Usage:"
  echo -e "  ksail down ${PURPLE}<backend>${WHITE} ${PURPLE}[flags]${WHITE}"
  echo
  echo "Backends:"
  echo "  k3d    k3s-in-docker"
  echo "  talos  talos-in-docker"
  echo
  echo "Flags:"
  echo -e "  -n     name of the cluster (${GREEN}ksail${WHITE})"
}

function main_check_os() {
  if [[ "$OSTYPE" != "darwin"* && "$OSTYPE" != "linux-gnu"* ]]; then
    echo "üö´ Unsupported OS. KSail only supports Unix and Linux based operating systems. Exiting..."
    exit 1
  fi
}

function main_define_colors() {
  RED='\033[1;31m'    # For errors
  GREEN='\033[1;32m'  # For defaults
  YELLOW='\033[1;33m' # For warnings
  BLUE='\033[1;34m'   # For titles
  PURPLE='\033[1;35m' # For code
  WHITE='\033[0m'     # For normal text
}

function main_define_font_types() {
  NORMAL=$(tput sgr0)    # For normal text
  BOLD=$(tput bold)      # For prompts and titles
  ITALIC=$(tput sitm)    # For emphasis
  UNDERLINE=$(tput smul) # For emphasis
}

function main_run_global_flags() {
  local flag=$1
  local help_arg=$2
  case "${flag}" in
  h)
    main_run_help "$help_arg"
    exit
    ;;
  \?)
    exit 1
    ;;
  esac
}

function main_run_help() {
  local help_arg=${1}
  if [ -z "$help_arg" ]; then
    main_run_help_no_arg
  else
    case $help_arg in
    install)
      main_run_help_install_arg
      exit
      ;;
    up)
      main_run_help_up_arg
      exit
      ;;
    up-k3d)
      main_run_help_up_k3d_arg
      exit
      ;;
    up-talos)
      main_run_help_up_talos_arg
      exit
      ;;
    down)
      main_run_help_down_arg
      exit
      ;;
    *)
      echo "üö® Bad help argument: $help_arg"
      exit 1
      ;;
    esac
  fi
}

function main_run_version() {
  echo "KSail $VERSION"
}

function main_run_down_destroy_k3d_cluster() {
  echo "üî• Destroying ${cluster_name} cluster"
  local cluster_name=${1}
  k3d cluster delete "$cluster_name" || {
    echo "üö® Cluster deletion failed. Exiting..."
    exit 1
  }
}

function main_run_down_destroy_talos_cluster() {
  talosctl cluster destroy --name "${cluster_name}" --force
  talosctl config context default
  talosctl config remove "${cluster_name}" -y
  kubectl config unset current-context
  if kubectl config get-contexts -o name | grep admin@"${cluster_name}"; then
    kubectl config delete-context admin@"${cluster_name}"
  fi
  if kubectl config get-clusters | grep "${cluster_name}"; then
    kubectl config delete-cluster "${cluster_name}"
  fi
  if kubectl config get-users | grep admin@"${cluster_name}"; then
    kubectl config delete-user admin@"${cluster_name}"
  fi
}

function main_run_update() {
  local cluster_name=${1}
  local manifests_path=${2}
  local time
  time=$(date +%s)
  echo "üó≥Ô∏è Push OCI artifact to Docker"
  flux push artifact oci://localhost:5050/"${cluster_name}":"$time" \
    --path="${manifests_path}" \
    --source="$(git config --get remote.origin.url)" \
    --revision="$(git branch --show-current)@sha1:$(git rev-parse HEAD)"
  flux tag artifact oci://localhost:5050/"${cluster_name}":"$time" \
    --tag latest
}

function main_run_introduction() {
  echo -e "‚õ¥Ô∏è üê≥   ${BOLD}${UNDERLINE}Welcome to ${BLUE}KSail${WHITE}   ‚õ¥Ô∏è üê≥${NORMAL}"
  echo -e "                                     ${BLUE}. . .${WHITE}"
  echo -e "                __/___                 ${BLUE}:${WHITE}"
  echo -e "          _____/______|             ___${BLUE}|${WHITE}____     |\"\\/\"|"
  echo "  _______/_____\_______\_____     ,'        \`.    \  /"
  echo -e "  \               ${ITALIC}KSail${NORMAL}      |    |  ^        \___/  |"
  echo -e "${BLUE}~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~^~${WHITE}"
  echo
  echo -e "${BLUE}KSail${WHITE} can help you provision ${GREEN}GitOps enabled K8s environments${WHITE} in ${BLUE}Docker${WHITE}."
  echo
}

function main_run_no_arg() {

  main_run_introduction
  main_run_help
}

function main_run_install_backend_dependency_homebrew() {
  if command -v brew &>/dev/null; then
    echo "üì¶‚úÖ Homebrew already installed. Updating..."
    brew upgrade
  else
    echo "üì¶üî® Installing Homebrew"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    (
      echo
      echo "eval '$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)'"
    ) >>/home/main_runner/.bashrc
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    echo "üì¶‚úÖ Homebrew installed"
  fi
}

function main_run_install_backend_dependency() {
  local dependency=${1}
  local command=${2}
  if [ -z "$command" ]; then
    command="$dependency"
  fi
  echo "üì¶ Installing $dependency"
  if command -v "$command" &>/dev/null; then
    echo "üì¶‚úÖ $dependency already installed. Skipping..."
  else
    echo "üì¶üî® Installing $dependency"
    brew install "$dependency"
    echo "üì¶‚úÖ $dependency installed"
  fi
}

function main_run_install_backend_dependencies() {
  local backend=${1}
  echo "üì¶ Installing dependencies"
  main_run_install_backend_dependency_homebrew
  main_run_install_backend_dependency "yq"
  main_run_install_backend_dependency "kubeconform"
  main_run_install_backend_dependency "kustomize"
  main_run_install_backend_dependency "docker"
  main_run_install_backend_dependency "fluxcd/tap/flux" "flux"
  main_run_install_backend_dependency "gpg"
  main_run_install_backend_dependency "kubectl"
  if [[ "$backend" == "k3d" ]]; then
    main_run_install_backend_dependency "k3d"
  elif [[ "$backend" == "talos" ]]; then
    main_run_install_backend_dependency "talos-systems/talos/talosctl" "talosctl"
  fi
}

function main_run_install_backend() {
  if [ $# -gt 2 ]; then
    echo "üö® Bad parameters: $*"
    exit 1
  fi
  local command=${2}
  case $command in
  k3d)
    main_run_install_backend_dependencies "k3d"
    exit
    ;;
  talos)
    main_run_install_backend_dependencies "talos"
    exit
    ;;
  *)
    if [ $# -eq 2 ]; then
      local OPTIND=2
      if getopts "h" flag; then
        main_run_global_flags "$flag" "install"
      fi
    fi
    echo "üö® Bad parameters: $*"
    exit 1
    ;;
  esac
}

function main_run_install() {
  if [ $# -eq 1 ]; then
    main_run_help install
  else
    main_run_install_backend "$@"
  fi
}

function main_run_check_if_docker_is_running() {
  echo "üê≥ Checking if Docker is running"
  if docker info &>/dev/null; then
    echo "üê≥‚úÖ Docker is running"
  else
    echo "üö® Docker is not running. Exiting..."
    exit 1
  fi
}

function main_run_up_check_registry_exists() {
  local registry_name=${1}
  if (docker volume ls | grep -q "${registry_name}") && (docker container ls -a | grep -q "${registry_name}"); then
    true
  else
    false
  fi
}

function main_run_up_create_oci_registry() {
  local registry_name=$1
  local remote_url=$2
  local port=$3

  if main_run_up_check_registry_exists "$registry_name"; then
    echo "üßÆ‚úÖ Registry '$registry_name' already exists. Skipping..."
  else
    echo "üßÆ Creating registry '$registry_name'"
    docker run -d -p "$port":5000 \
      -e REGISTRY_PROXY_REMOTEURL="$remote_url" \
      --restart always \
      --name "$registry_name" \
      --volume "$registry_name":/var/lib/registry \
      registry:2 || {
      echo "üö® Registry creation failed. Exiting..."
      exit 1
    }
  fi
}

function main_run_up_create_oci_registries() {
  echo "üßÆ Adding pull-through registries"
  main_run_up_create_oci_registry "proxy-docker-hub.com" "https://hub.docker.com" 5002
  main_run_up_create_oci_registry "proxy-registry.k8s.io" "https://registry.k8s.io" 5003
  main_run_up_create_oci_registry "proxy-gcr.io" "https://gcr.io" 5004
  main_run_up_create_oci_registry "proxy-ghcr.io" "https://ghcr.io" 5005
  main_run_up_create_oci_registry "proxy-quay.io" "https://quay.io" 5006
  main_run_up_create_oci_registry "manifests" "" 5050
}

function main_run_up_add_sops_gpg_key() {
  echo "üîê Adding SOPS GPG key"
  kubectl create namespace flux-system
  if [[ -z ${KSAIL_SOPS_GPG_KEY} ]]; then
    gpg --batch --passphrase '' --quick-gen-key ksail default default
    local fingerprint
    fingerprint=$(gpg --list-keys -uid ksail | grep '^      *' | tr -d ' ')
    export KSAIL_SOPS_GPG_KEY
    KSAIL_SOPS_GPG_KEY=$(gpg --export-secret-keys --armor "$fingerprint")
  else
    kubectl create secret generic sops-gpg \
      --namespace=flux-system \
      --from-literal=sops.asc="${KSAIL_SOPS_GPG_KEY}" ||
      {
        echo "üö® SOPS GPG key creation failed. Exiting..."
        exit 1
      }
  fi
}

function main_run_up_install_flux() {
  local cluster_name=${1}
  local docker_gateway_ip=${2}
  local flux_path=${3}
  echo "üöÄ Installing Flux"
  flux check --pre || {
    echo "üö® Flux prerequisites check failed. Exiting..."
    exit 1
  }
  flux install || {
    echo "üö® Flux installation failed. Exiting..."
    exit 1
  }
  local source_url="oci://$docker_gateway_ip:5050/${cluster_name}"
  flux create source oci flux-system \
    --url="$source_url" \
    --insecure=true \
    --tag=latest || {
    echo "üö® Flux OCI source creation failed. Exiting..."
    exit 1
  }

  flux create source oci devantler-manifests \
    --url=oci://ghcr.io/devantler/oci-registry/manifests \
    --tag=latest || {
    echo "üö® Flux OCI source creation failed. Exiting..."
    exit 1
  }

  flux create kustomization flux-system \
    --source=OCIRepository/flux-system \
    --path="${flux_path}" || {
    echo "üö® Flux kustomization creation failed. Exiting..."
    exit 1
  }
}

function main_run_up_provision_k3d_cluster() {
  echo "‚õ¥Ô∏è Provision ${cluster_name} cluster"
  if $k3d_config_path; then
    k3d cluster create --config "${k3d_config_path}" "$cluster_name" || {
      echo "üö® Cluster creation failed. Exiting..."
      exit 1
    }
  else
    k3d cluster create "$cluster_name" || {
      echo "üö® Cluster creation failed. Exiting..."
      exit 1
    }
  fi
}

function main_run_up_provision_talos_cluster() {
  local cluster_name=${1}
  local docker_gateway_ip=${2}
  echo "‚õ¥Ô∏è Provision ${cluster_name} cluster"
  talosctl cluster create \
    --name "${cluster_name}" \
    --registry-mirror docker.io=http://"$docker_gateway_ip":5001 \
    --registry-mirror hub.docker.com=http://"$docker_gateway_ip":5002 \
    --registry-mirror registry.k8s.io=http://"$docker_gateway_ip":5003 \
    --registry-mirror gcr.io=http://"$docker_gateway_ip":5004 \
    --registry-mirror ghcr.io=http://"$docker_gateway_ip":5005 \
    --registry-mirror quay.io=http://"$docker_gateway_ip":5006 \
    --registry-mirror manifests=http://"$docker_gateway_ip":5050 \
    --wait || {
    echo "üö® Cluster creation failed. Exiting..."
    exit 1
  }
  # talosctl config nodes 10.5.0.2 10.5.0.3 || {
  #   echo "üö® Cluster configuration failed. Exiting..."
  #   exit 1
  # }

  # TODO: Add support for Talos patching
}

function main_run_up_provision_cluster() {
  local cluster_name=${1}
  local backend=${2}
  local docker_gateway_ip=${3}
  if [[ "$backend" == "k3d" ]]; then
    main_run_up_provision_k3d_cluster "$cluster_name"
  elif [[ "$backend" == "talos" ]]; then
    main_run_up_provision_talos_cluster "$cluster_name" "$docker_gateway_ip"
  fi
}

function main_run_up_handle_prompts_k3d() {
  echo -e "${BOLD}What is the path to your k3d cluster config file? (default: ${GREEN}./${cluster_name}-k3d-config.yaml${WHITE})${NORMAL}"
  while true; do
    echo -n "> "
    read -r k3d_config_path
    if [ -z "$k3d_config_path" ]; then
      k3d_config_path="./${cluster_name}-k3d-config.yaml"
    fi
    if k3d_config_path=$(realpath "$k3d_config_path"); then
      break
    else
      echo
      echo "üö´ K3d config path does not exist. Please enter a valid path."
    fi
  done
}

function main_run_up_handle_prompts_talos() {
  echo
}

function main_run_up_handle_prompts() {
  echo "‚öôÔ∏è Configuring cluster"
  echo -e "${BOLD}What is the name of your cluster? (default: ${GREEN}ksail${WHITE})${NORMAL}"
  echo -n "> "
  read -r cluster_name
  if [ -z "$cluster_name" ]; then
    cluster_name="ksail"
  fi

  echo -e "${BOLD}What is the path to your manifests files? (default: ${GREEN}./k8s${WHITE})${NORMAL}"
  while true; do
    echo -n "> "
    read -r manifests_path
    if [ -z "$manifests_path" ]; then
      manifests_path="./k8s"
    fi
    if manifests_path=$(realpath "$manifests_path"); then
      break
    else
      echo
      echo "üö´ Manifests path does not exist. Please enter a valid path."
    fi
  done

  echo -e "${BOLD}What is the path to your flux kustomizations? (default: ${GREEN}./clusters/${cluster_name}/flux${WHITE})${NORMAL}"
  while true; do
    echo -n "> "
    read -r flux_path
    if [ -z "$flux_path" ]; then
      flux_path="./clusters/${cluster_name}/flux"
    fi
    if flux_path=$(realpath "$flux_path"); then
      break
    else
      echo
      echo "üö´ Flux path does not exist. Please enter a valid path."
    fi
  done

  if [[ "$backend" == "k3d" ]]; then
    main_run_up_handle_prompts_k3d
  elif [[ "$backend" == "talos" ]]; then
    main_run_up_handle_prompts_talos
  fi
}

function main_run_up_handle_flags() {
  local backend=${2}
  local OPTIND=3
  while getopts "n:m:f:c:h" flag; do
    case "${flag}" in
    n)
      cluster_name=${OPTARG}
      flux_path="./clusters/${cluster_name}/flux"
      ;;
    m)
      manifests_path=${OPTARG}
      if ! manifests_path=$(realpath "$manifests_path"); then
        echo "üö® Manifests path does not exist. Exiting..."
        exit 1
      fi
      ;;
    f)
      flux_path=${OPTARG}
      if ! flux_path=$(realpath "$flux_path"); then
        echo "üö® Flux path does not exist. Exiting..."
        exit 1
      fi
      ;;
    c)
      if [[ "$backend" != "k3d" ]]; then
        echo "üö® Bad parameters: $*"
        exit 1
      fi
      k3d_config_path=${OPTARG}
      if ! k3d_config_path=$(realpath "$k3d_config_path"); then
        echo "üö® K3d config path does not exist. Exiting..."
        exit 1
      fi
      ;;
    *)
      if [ $# -eq 3 ] && [[ " ${valid_global_flags[*]} " =~ (^| )${3}( |$) ]]; then
        local OPTIND=3
        if getopts "h" flag; then
          if [[ "$backend" == "k3d" ]]; then
            main_run_global_flags "$flag" "up-k3d"
          elif [[ "$backend" == "talos" ]]; then
            main_run_global_flags "$flag" "up-talos"
          fi
        fi
      fi
      echo "üö® Bad parameters: $*"
      exit 1
      ;;
    esac
  done
  shift $((OPTIND - 1))
  if [ $# -gt 0 ]; then
    echo "üö® Bad parameters: $*"
    exit 1
  fi
}

function main_run_up_validate_configuration() {
  echo "üîç Validating configuration"
  if ! manifests_path=$(realpath "$manifests_path"); then
    echo "üö® Manifests path does not exist. Exiting..."
    exit 1
  fi
  if ! flux_path=$(realpath "$flux_path"); then
    echo "üö® Flux path does not exist. Exiting..."
    exit 1
  fi
  if [[ "$backend" == "k3d" && -n "$k3d_config_path" ]]; then
    if ! k3d_config_path=$(realpath "$k3d_config_path"); then
      echo "üö® K3d config path does not exist. Exiting..."
      exit 1
    fi
  fi
  echo "üîç‚úÖ Configuration is valid"
}

function main_run_up() {
  local cluster_name="ksail"
  local backend
  local manifests_path="./k8s"
  local flux_path="./clusters/${cluster_name}/flux"
  local k3d_config_path
  local docker_gateway_ip
  docker_gateway_ip=$(docker network inspect bridge --format='{{(index .IPAM.Config 0).Gateway}}')
  if [[ "$OSTYPE" == "darwin"* ]]; then
    docker_gateway_ip="192.168.65.254"
  fi
  if [ $# -eq 1 ]; then
    main_run_help up
  else
    local command=${2}
    case $command in
    k3d)
      backend=$command
      ;;
    talos)
      backend=$command
      ;;
    *)
      if [ $# -eq 2 ]; then
        local OPTIND=2
        if getopts "h" flag; then
          main_run_global_flags "$flag" up
        fi
      fi
      echo "üö® Bad parameters: $*"
      exit 1
      ;;
    esac
  fi
  if [ $# -eq 2 ]; then
    main_run_up_handle_prompts
  else
    main_run_up_handle_flags "$@"
  fi
  main_run_up_validate_configuration && echo
  main_run_check_if_docker_is_running && echo
  main_run_up_create_oci_registries && echo
  main_run_update "$cluster_name" "$manifests_path" && echo
  main_run_down_destroy_cluster "$cluster_name" "$backend" && echo
  main_run_up_provision_cluster "$cluster_name" "$backend" "$docker_gateway_ip" && echo
  main_run_up_install_flux "$cluster_name" "$docker_gateway_ip" "$flux_path"
}

function main_run_down_handle_prompts() {
  echo -e "${BOLD}Which cluster would you like to destroy?"
  while true; do
    read -r cluster_name
    if [[ -z "$cluster_name" ]]; then
      echo "üö´ You must enter a cluster name."
      echo
    else
      break
    fi
  done
  echo
}

function main_run_down_handle_flags() {
  local OPTIND=3
  while getopts "hn:" flag; do
    case "${flag}" in
    n)
      cluster_name=${OPTARG}
      ;;
    *)
      main_run_global_flags "$flag" down
      ;;
    esac
  done
}

function main_run_down_destroy_cluster() {
  local cluster_name=${1}
  local backend=${2}
  if [[ "$backend" == "k3d" ]]; then
    main_run_down_destroy_k3d_cluster "$cluster_name"
  elif [[ "$backend" == "talos" ]]; then
    main_run_down_destroy_talos_cluster "$cluster_name"
  fi
}

function main_run_down() {
  local cluster_name="ksail"
  local backend
  if [ $# -eq 1 ]; then
    main_run_help down
  else
    local command=${2}
    case $command in
    k3d)
      backend=$command
      ;;
    talos)
      backend=$command
      ;;
    *)
      if [ $# -eq 2 ]; then
        local OPTIND=2
        if getopts "h" flag; then
          main_run_global_flags "$flag" down
        fi
      fi
      echo "üö® Bad parameters: $*"
      exit 1
      ;;
    esac
  fi
  if [ $# -eq 2 ]; then
    main_run_down_handle_prompts
  else
    main_run_down_handle_flags "$@"
  fi
  main_run_check_if_docker_is_running
  main_run_down_destroy_cluster "$cluster_name" "$backend"

}

function main_run() {
  if [ $# -eq 0 ]; then
    main_run_no_arg
  else
    local command=${1}
    case $command in
    install)
      main_run_install "$@"
      exit
      ;;
    up)
      main_run_up "$@"
      exit
      ;;
    down)
      main_run_down "$@"
      exit
      ;;
    update)
      main_run_update "$@"
      exit
      ;;
    validate)
      main_run_validate "$@"
      exit
      ;;
    verify)
      main_run_verify "$@"
      exit
      ;;
    *)
      local OPTIND=1
      if [ $# -eq 1 ]; then
        while getopts "hv" flag; do
          main_run_global_flags "$flag" ""
          case "${flag}" in
          v)
            main_run_version
            exit
            ;;
          *)
            echo "üö® Invalid flag: $flag"
            exit 1
            ;;
          esac
        done
      fi
      echo "üö® Bad parameters: $*"
      exit 1
      ;;
    esac
  fi
}

function main() {
  main_check_os
  main_define_colors
  main_define_font_types
  main_run "$@"
}

main "$@"
